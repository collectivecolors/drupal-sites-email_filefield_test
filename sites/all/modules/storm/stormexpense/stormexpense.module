<?php
// $Id: stormexpense.module,v 1.4.4.30 2009/07/31 15:41:29 magnity Exp $

/**
 * @file
 */

function stormexpense_help($path, $arg) {
  $o = '';

  switch ($path) {
    case "admin/help#stormexpense":
      $o = '<p>'. t("Provides expense support for Storm") .'</p>';
      break;
  }

  return $o;
}

function stormexpense_perm() {
  return array(
    'Storm expense: access',
    'Storm expense: add',
    'Storm expense: delete all',
    'Storm expense: delete own',
    'Storm expense: delete of user organization',
    'Storm expense: edit all',
    'Storm expense: edit own',
    'Storm expense: edit of user organization',
    'Storm expense: view all',
    'Storm expense: view own',
    'Storm expense: view of user organization',
  );
}

function stormexpense_access($op, $node, $account=NULL) {
  if (empty($account)) {
    global $user;
    $account = $user;
  }

  if ($op == 'create') {
    return user_access('Storm expense: add');
  }

  if (is_numeric($node)) $node = node_load($node);

  if ($op == 'delete') {
    if (user_access('Storm expense: delete all')) {
      return TRUE;
    }
    else if (user_access('Storm expense: delete own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    else if (user_access('Storm expense: delete of user organization') && ($account->stormorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }

  if ($op == 'update') {
    if (user_access('Storm expense: edit all')) {
      return TRUE;
    }
    else if (user_access('Storm expense: edit own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    else if (user_access('Storm expense: edit of user organization') && ($account->stormorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }

  if ($op == 'view') {
    if (user_access('Storm expense: view all')) {
      return TRUE;
    }
    else if (user_access('Storm expense: view own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    else if (user_access('Storm expense: view of user organization') && ($account->stormorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }
  return FALSE;
}

function stormexpense_access_sql($sql, $where = array()) {
  if (user_access('Storm expense: view all')) {
    $where[] = "'storm_access'='storm_access'";
    return storm_rewrite_sql($sql, $where);
  }

  global $user;

  $cond = '';
  if (user_access('Storm expense: view own')) {
    $cond .= 'n.uid='. $user->uid;
  }
  if (user_access('Storm expense: view of user organization')) {
    if (!empty($cond)) $cond .= ' OR ';
    $cond .= 'sex.organization_nid='. $user->stormorganization_nid;
  }
  if (empty($cond)) $cond = '0=1';
  $where[] = $cond;

  $where[] = "'storm_access'='storm_access'";
  return storm_rewrite_sql($sql, $where);
}

function stormexpense_storm_rewrite_where_sql($query, $primary_table, $account) {
  static $conds = array();

  if ($conds[$primary_table][$account->uid]) {
    return $conds[$primary_table][$account->uid];
  }

  if (preg_match("/'storm_access'='storm_access'/", $query)) {
    $cond = '';
  }
  else {
    if (user_access('Storm expense: view all', $account)) {
      return '';
    }

    $cond = '';
    if (user_access('Storm expense: view own', $account)) {
      $cond .= "${primary_table}.uid=". $account->uid;
    }
    if (user_access('Storm expense view of user organization', $account)) {
      if ($cond) {
        $cond .= ' OR ';
      }
      // If function is called without viewing an expense, this variable may not be set.
      // These lines check for that and set the organization node id to zero if not otherwise set.
      if (!isset($account->stormorganization_nid)) {
        $account->stormorganization_nid = 0;
      }
      $cond .= ' sex1.organization_nid='. $account->stormorganization_nid;
    }
    if ($cond) {
      $cond = " WHEN 'stormexpense' THEN (SELECT IF($cond,1,0) FROM {stormexpense} sex1 WHERE sex1.vid=${primary_table}.vid) ";
    }
    else {
      $cond = " WHEN 'stormexpense' THEN 0 ";
    }
  }

  $conds[$primary_table][$account->uid] = $cond;
  return $cond;
}

function stormexpense_menu() {
  $items = array();

  $items['storm/expenses'] = array(
    'title' => t('Expenses'),
    'description' => t('Storm expenses'),
    'page callback' => 'stormexpense_list',
    'access arguments' => array('Storm expense: access'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'stormexpense.admin.inc',
  );

  $items['storm/expenses/report/%/%'] = array(
    'title' => t('Expenses'),
    'page arguments' => array(3, 4),
    'description' => t('Storm expenses'),
    'page callback' => 'stormexpense_list_report',
    'access arguments' => array('Storm expense: access'),
    'type' => MENU_CALLBACK,
    'file' => 'stormexpense.admin.inc',
  );

  $items['storm/expenses/provider_autocomplete'] = array(
    'title' => 'Provider autocomplete',
    'page callback' => 'stormexpense_autocomplete',
    'access arguments' => array('Storm expense: access'),
    'type' => MENU_CALLBACK,
    'file' => 'stormexpense.admin.inc',
  );

  return $items;
}

function stormexpense_theme() {
  return array(
    'stormexpense_list' => array(
      'file'      => 'stormexpense.theme.inc',
      'arguments' => array('header', 'tasks', 'duration'),
    ),
    'stormexpense_view' => array(
      'file'      => 'stormexpense.theme.inc',
      'arguments' => array('node', 'teaser', 'page'),
    ),
    'stormexpense_list_form_report_reports' => array(
      'file'      => 'stormexpense.theme.inc',
    ),
    'stormexpense_list_report' => array(
      'file'      => 'stormexpense.theme.inc',
      'arguments' => array('report', 'language', 'timetrackings'),
    ),
  );
}

function stormexpense_node_info() {
  return array(
    'stormexpense' => array(
      'name' => t('Expense'),
      'module' => 'stormexpense',
      'description' => t("An expense for Storm."),
      'title_label' => t("Title"),
      'body_label' => t("Description"),
    )
  );
}

function stormexpense_stormorganization_change($organization_nid, $organization_title) {
  $s = "UPDATE {stormexpense} SET organization_title='%s' WHERE organization_nid=%d AND organization_title <> '%s'";
  db_query($s, $organization_title, $organization_nid, $organization_title);
}

function stormexpense_stormproject_change($project_nid, $project_title) {
  $s = "UPDATE {stormexpense} SET project_title='%s' WHERE project_nid=%d AND project_title <> '%s'";
  db_query($s, $project_title, $project_nid, $project_title);
}

function stormexpense_stormtask_change($task_nid, $task_stepno, $task_title) {
  $s = "UPDATE {stormexpense} SET task_title='%s', task_stepno='%s' WHERE task_nid=%d AND
      (task_title<>'%s' OR task_stepno<>'%s')";
  db_query($s, $task_title, $task_stepno, $task_nid, $task_title, $task_stepno);
}

function stormexpense_stormticket_change($ticket_nid, $ticket_title) {
  $s = "UPDATE {stormexpense} SET ticket_title='%s' WHERE ticket_nid=%d AND ticket_title <> '%s'";
  db_query($s, $ticket_title, $ticket_nid, $ticket_title);
}

function stormexpense_form(&$node) {
  $breadcrumb = array();
  $breadcrumb[] = l(t('Storm'), 'storm');
  $breadcrumb[] = l(t('Expenses'), 'storm/expenses');
  drupal_set_breadcrumb($breadcrumb);

  if (arg(1)=='add') {
    if (array_key_exists('organization_nid', $_GET) && !$node->organization_nid) {
      $node->organization_nid = $_GET['organization_nid'];
    }
    if (array_key_exists('project_nid', $_GET) && !$node->project_nid) {
      $node->project_nid = $_GET['project_nid'];
      $p = node_load($node->project_nid);
      $node->organization_nid = $p->organization_nid;
    }
    if (array_key_exists('task_nid', $_GET) && !$node->task_nid) {
      $node->task_nid = $_GET['task_nid'];
      $t = node_load($node->task_nid);
      $node->organization_nid = $t->organization_nid;
      $node->project_nid = $t->project_nid;
    }
    if (array_key_exists('ticket_nid', $_GET) && !$node->ticket_nid) {
      $node->ticket_nid = $_GET['ticket_nid'];
      $t = node_load($node->ticket_nid);
      $node->organization_nid = $t->organization_nid;
      $node->project_nid = $t->project_nid;
      $node->task_nid = $t->task_nid;
    }

    if ($_SESSION['stormexpense_list_filter']['organization_nid'] && !$node->organization_nid) {
      $node->organization_nid = $_SESSION['stormexpense_list_filter']['organization_nid'];
    }
    if ($_SESSION['stormexpense_list_filter']['project_nid'] && !$node->project_nid) {
      $node->project_nid = $_SESSION['stormexpense_list_filter']['project_nid'];
    }
    if ($_SESSION['stormexpense_list_filter']['task_nid'] && !$node->task_nid) {
      $node->task_nid = $_SESSION['stormexpense_list_filter']['task_nid'];
    }
    if ($_SESSION['stormexpense_list_filter']['ticket_nid'] && !$node->ticket_nid) {
      $node->ticket_nid = $_SESSION['stormexpense_list_filter']['ticket_nid'];
    }
    if (array_key_exists('organization_nid', $_GET)) $node->organization_nid = $_GET['organization_nid'];
    if (array_key_exists('project_nid', $_GET)) $node->project_nid = $_GET['project_nid'];
    if (array_key_exists('task_nid', $_GET)) $node->task_nid = $_GET['task_nid'];
    if (array_key_exists('ticket_nid', $_GET)) $node->ticket_nid = $_GET['ticket_nid'];

    $node->expensedate = time();
    $s_org = "SELECT n.nid, n.title FROM {stormorganization} so INNER JOIN {node} n 
              ON so.nid=n.nid WHERE n.status=1 AND so.isactive=1 AND so.iscustomer=1 AND n.type='stormorganization' ORDER BY n.title";
    
    // Load tax defaults
    $node->tax1app = variable_get('storm_tax1_app', 1);
    $node->tax1percent = variable_get('storm_tax1_percent', 20);
    $node->tax2app = variable_get('storm_tax2_app', 0);
    $node->tax2percent = variable_get('storm_tax2_percent', 20);
  }
  else {
    $s_org = "SELECT n.nid, n.title FROM {stormorganization} so INNER JOIN {node} n 
              ON so.nid=n.nid WHERE n.status=1 AND so.iscustomer=1 AND n.type='stormorganization' ORDER BY n.title";
  }

  // Transition to compound tax - allow for nodes which may have been saved in the past without a tax percentage
  if ((arg(2) == 'edit') && ($node->tax1percent == NULL)) {
    $node->tax1percent = $node->tax1 / $node->amount * 100;
  }
  
  $type = node_get_types('type', $node);
  $w = -100;
  
  $form['#attributes']['class'] = 'stormcomponent_node_form';

  $form['group1'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => $w++,
  );

  $form['group1']['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
  );

  $form['group2'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => $w++,
  );

  $s_org = stormorganization_access_sql($s_org);
  $s_org = db_rewrite_sql($s_org);
  $r = db_query($s_org);
  $organizations = array();
  while ($organization = db_fetch_object($r)) {
    $organizations[$organization->nid] = $organization->title;
    if (!$node->organization_nid) $node->organization_nid = $organization->nid;
  }
  $form['group2']['organization_nid'] = array(
    '#type' => 'select',
    '#title' => t('Organization'),
    '#default_value' => $node->organization_nid,
    '#options' => $organizations,
    '#required' => true,
    '#attributes' => array('onchange' => "stormticket_organization_project_task_tickets(this, 'edit-project-nid', 'edit-task-nid', 'edit-ticket-nid', true, '-')"),
  );

  $s = "SELECT n.nid, n.title FROM {node} AS n INNER JOIN {stormproject} AS spr ON spr.vid=n.vid
  WHERE spr.organization_nid=%d AND n.status=1 AND n.type='stormproject' ORDER BY n.title";
  $s = stormproject_access_sql($s);
  $s = db_rewrite_sql($s);
  $r = db_query($s, $node->organization_nid);
  $projects = array();
  while ($project = db_fetch_object($r)) {
    $projects[$project->nid] = $project->title;
  }
  $projects = array(0 => '-') + $projects;
  $form['group2']['project_nid'] = array(
    '#type' => 'select',
    '#title' => t('Project'),
    '#default_value' => $node->project_nid,
    '#options' => $projects,
    '#process' => array('storm_dependent_select_process'),
    '#attributes' => array('onchange' => "stormticket_project_task_tickets(this, 'edit-organization-nid', 'edit-task-nid', 'edit-ticket-nid', true, '-')"),
  );

  $tree = _stormtask_get_tree($node->project_nid);
  $tasks = _stormtask_plain_tree($tree);
  $tasks = array(0 => '-') + $tasks;
  $form['group2']['task_nid'] = array(
    '#type' => 'select',
    '#title' => t('Task'),
    '#default_value' => $node->task_nid,
    '#options' => $tasks,
    '#process' => array('storm_dependent_select_process'),
    '#attributes' => array('onchange' => "stormticket_task_tickets(this, 'edit-organization-nid', 'edit-project-nid', 'edit-ticket-nid', true, '-')"),
  );

  $tickets = array();
  $s = "SELECT n.nid, n.title FROM {node} AS n INNER JOIN {stormticket} AS sti ON sti.vid=n.vid WHERE n.status=1 AND n.type='stormticket'
  AND sti.organization_nid=%d AND sti.project_nid=%d AND sti.task_nid=%d ORDER BY n.title";
  $s = stormticket_access_sql($s);
  $s = db_rewrite_sql($s);
  $r = db_query($s, $node->organization_nid, $node->project_nid, $node->task_nid);
  while ($ticket = db_fetch_object($r)) {
    $tickets[$ticket->nid] = $ticket->title;
  }
  $form['group2']['ticket_nid'] = array(
    '#type' => 'select',
    '#title' => t('Ticket'),
    '#default_value' => $node->ticket_nid,
    '#options' => array(0 => '-') + $tickets,
    '#process' => array('storm_dependent_select_process'),
  );

  $form['group3'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => $w++,
  );

  $form['group3']['expensedate'] = array(
    '#type' => 'date',
    '#title' => t('Date'),
    '#default_value' => _storm_gmtimestamp_to_date($node->expensedate),
  );

  $form['group3']['provider_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Provider'),
    '#size' => 50,
    '#default_value' => $node->provider_title,
    '#autocomplete_path' => 'storm/expenses/provider_autocomplete',
  );
  
  $form['group4'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => $w++,
  );
  
  $form['group4']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#default_value' => $node->amount,
    '#size' => 15,
    '#weight' => $w++,
  );

  $form['group5'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => $w++,
  );
  
  $form['group5']['tax1app'] = array(
    '#type' => 'select',
    '#title' => t('Tax 1 Application'),
    '#options' => array(
      1 => t('Apply to item amount'),
      0 => t('Do not apply tax'),
    ),
    '#default_value' => $node->tax1app,
  );
  
  $form['group5']['tax1percent'] = array(
    '#type' => 'textfield',
    '#title' => t('Tax 1 Percentage'),
    '#default_value' => $node->tax1percent,
    '#size' => 20,
  );
  
  $form['group5']['tax2app'] = array(
    '#type' => 'select',
    '#title' => t('Tax 2 Application'),
    '#options' => array(
      2 => t('Apply to total of item amount plus previous tax'),
      1 => t('Apply to item amount'),
      0 => t('Do not apply tax'),
    ),
    '#default_value' => $node->tax2app,
  );
  
  $form['group5']['tax2percent'] = array(
    '#type' => 'textfield',
    '#title' => t('Tax 2 Percentage'),
    '#default_value' => $node->tax2percent,
    '#size' => 20,
  );
  
  if (!variable_get('storm_tax_display', TRUE)) {
    $form['group5']['#type'] = 'hidden';
  }
  if (!variable_get('storm_tax2_display', TRUE)) {
    $form['group5']['tax2app']['#type'] = 'hidden';
    $form['group5']['tax2percent']['#type'] = 'hidden';
  }
  
  $form['taxnotes'] = array(
    '#type' => 'markup',
    '#value' => t('Totals will be calculated automatically according to your tax selections.'),
    '#weight' => $w++,
  );

  if ($type->has_body) {
    $form['body'] = array(
      '#type' => 'textarea',
      '#title' => check_plain($type->body_label),
      '#default_value' => $node->body,
      '#required' => FALSE,
      '#weight' => $w++,
    );
    $form['body_filter']['format'] = filter_form($node->format);
  }
  return $form;
}

// NODE MANIPULATION FUNCTIONS
function stormexpense_insert($node) {
  _stormexpense_beforesave($node);

  db_query("INSERT INTO {stormexpense}
    (vid, nid, organization_nid, organization_title, project_nid, project_title, 
    task_nid, task_title, task_stepno, ticket_nid, ticket_title, 
    provider_nid, provider_title, expensedate, amount, tax1app, tax1percent, 
    tax1, subtotal, tax2app, tax2percent, tax2, total) VALUES
    (%d, %d, %d, '%s', %d, '%s',
    %d, '%s', '%s', %d, '%s',
    %d, '%s', %d, %f, %d, %f, 
    %f, %f, %d, %f, %f, %f)",
    $node->vid, $node->nid, $node->organization_nid, $node->organization_title, $node->project_nid, $node->project_title, 
    $node->task_nid, $node->task_title, $node->task_stepno, $node->ticket_nid, $node->ticket_title, 
    $node->provider_nid, $node->provider_title, $node->expensedate, $node->amount, $node->tax1app, $node->tax1percent, 
    $node->tax1, $node->subtotal, $node->tax2app, $node->tax2percent, $node->tax2, $node->total);
}

function stormexpense_update($node) {
  _stormexpense_beforesave($node);

  if ($node->revision) {
    stormexpense_insert($node);
  }
  else {
    db_query("UPDATE {stormexpense} SET
      organization_nid=%d, organization_title='%s', project_nid=%d, project_title='%s',
      task_nid=%d, task_title='%s', task_stepno='%s', ticket_nid=%d, ticket_title='%s',
      provider_nid=%d, provider_title='%s', expensedate=%d, amount=%f, tax1app=%d, tax1percent=%f, 
      tax1=%f, subtotal=%f, tax2app=%d, tax2percent=%f, tax2=%f, total=%f WHERE vid = %d",
      $node->organization_nid, $node->organization_title, $node->project_nid, $node->project_title,
      $node->task_nid, $node->task_title, $node->task_stepno, $node->ticket_nid, $node->ticket_title,
      $node->provider_nid, $node->provider_title, $node->expensedate, $node->amount, $node->tax1app, $node->tax1percent, 
      $node->tax1, $node->subtotal, $node->tax2app, $node->tax2percent, $node->tax2, $node->total, $node->vid);
  }
}

function _stormexpense_beforesave(&$node) {
  $node->expensedate = _storm_date_to_gmtimestamp($node->expensedate);

  storm_taxation($node);
  
  $s = "SELECT n.title FROM {node} AS n
    INNER JOIN {stormorganization} AS o ON n.nid=o.nid
    WHERE type='stormorganization' AND n.nid=%d";
  $r = db_query($s, $node->organization_nid);
  $o = db_fetch_object($r);
  $node->organization_title = $o->title;

  $s = "SELECT n.title, p.organization_title 
    FROM {node} n INNER JOIN {stormproject} p ON n.nid=p.nid
    WHERE type='stormproject' AND n.nid=%d";
  $r = db_query($s, $node->project_nid);
  $p = db_fetch_object($r);
  $node->project_title = $p->title;

  $s = "SELECT title, stepno FROM {node} AS n INNER JOIN {stormtask} AS t ON n.vid=t.vid WHERE n.type='stormtask' AND n.nid=%d";
  $r = db_query($s, $node->task_nid);
  $ta = db_fetch_object($r);
  $node->task_title = $ta->title;
  $node->task_stepno = $ta->stepno;

  $s = "SELECT title FROM {node} AS n INNER JOIN {stormticket} AS t ON n.vid=t.vid WHERE n.type='stormticket' AND n.nid=%d";
  $r = db_query($s, $node->ticket_nid);
  $ti = db_fetch_object($r);
  $node->ticket_title = $ti->title;
}

function stormexpense_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'delete revision':
      // Notice that we're matching a single revision based on the node's vid.
      db_query('DELETE FROM {stormexpense} WHERE vid = %d', $node->vid);
      break;
  }
}

function stormexpense_delete($node) {
  db_query('DELETE FROM {stormexpense} WHERE nid = %d', $node->nid);
}

function stormexpense_load($node) {
  $additions = db_fetch_object(db_query('SELECT * FROM {stormexpense} WHERE vid = %d', $node->vid));
  return $additions;
}

function stormexpense_view($node, $teaser = FALSE, $page = FALSE) {
  return theme('stormexpense_view', $node, $teaser, $page);
}

// INVOICE AUTO ADD HANDLER
function stormexpense_storminvoice_auto_add($node, $invoice_nid = NULL) {
  if (!module_exists('storminvoice')) {
    drupal_set_message(t('This function should only be called from within Storm Invoice'));
    return;
  } 
  else {
    global $user;
    
    if (!$invoice_nid) {
    
      $new_invoice = new StdClass;
      
      //Code copied with edits from node form
      $new_invoice->requestdate = time();
      $new_invoice->duedate = $new_invoice->requestdate + (variable_get('storminvoice_payment_days', 30) * 86400);
      $s = "SELECT MAX(CAST(SUBSTRING_INDEX(sin.number, '/', 1) AS SIGNED)) FROM {node} n INNER JOIN {storminvoice} sin ON n.nid=sin.nid
        WHERE n.type='storminvoice' AND YEAR(FROM_UNIXTIME(sin.requestdate))=YEAR(FROM_UNIXTIME(%d))";
      $date = getdate($new_invoice->requestdate);
      $new_invoice->number = (db_result(db_query($s, $new_invoice->requestdate)) + 1) .'/'. $date['year'];

      $new_invoice->title = $node->title;
      $new_invoice->uid = $user->uid;
      $new_invoice->type = 'storminvoice';
      //$new_invoice->reference
      $new_invoice->organization_nid = $node->organization_nid;
      $new_invoice->organization_title = $node->organization_title;
      $new_invoice->project_nid = $node->project_nid;
      $new_invoice->project_title = $node->project_title;
      //$new_invoice->amount
      //$new_invoice->tax
      //$new_invoice->total
      //$new_invoice->totalcustomercurr
      //$new_invoice->taxexempt
      $new_invoice->src_nid = $node->nid;
      $new_invoice->src_vid = $node->vid;
      
      node_save($new_invoice);
      $invoice_nid = $new_invoice->nid;
    }
    
    $new_invoice_item = new StdClass;
    $new_invoice_item->uid = $user->uid;
    $new_invoice_item->type = 'storminvoiceitem';

    if ($node->ticket_nid) {
      $parent_ticket = node_load($node->ticket_nid);
    }
    elseif ($node->task_nid) {
      $parent_task = node_load($node->task_nid);
    }
    elseif ($node->project_nid) {
      $parent_project = node_load($node->project_nid);
    }
    else {
      $parent_organization = node_load($node->organization_nid);
    }

    $new_invoice_item->invoice_nid = $invoice_nid;
    $new_invoice_item->title = $node->title;
    $new_invoice_item->amount = $node->amount;
    // Tax percent simply uses default at the moment
    $new_invoice_item->tax1app = $node->tax1app;
    $new_invoice_item->tax1percent = $node->tax1percent;
    $new_invoice_item->tax1;
    $new_invoice_item->tax2app = $node->tax2app;
    $new_invoice_item->tax2percent = $node->tax2percent;
    $new_invoice_item->tax2;
    //$new_invoice_item->total

    node_save($new_invoice_item);
  }
  return $invoice_nid;
}


function stormexpense_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'stormexpense'),
  );
}
